name: Continuous Integration - notebooks

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, edited]

  # run manually from Actions tab
  # https://github.com/Salient-Predictions/salientsdk/actions/workflows/notebook.yaml
  workflow_dispatch:
jobs:
  get-notebooks:
    runs-on: ubuntu-latest
    outputs:
      parallel_matrix: ${{ steps.set-matrix.outputs.parallel_matrix }}
      sequential_matrix: ${{ steps.set-matrix.outputs.sequential_matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        run: |
          # Find notebooks that use downscale
          DOWNSCALE_NOTEBOOKS=$(grep -l "sk.downscale(" salientsdk/examples/*.ipynb | grep -v "/\." || true)
          CLOUDFLARE_NOTEBOOKS=$(grep -l "sk.ForecastZarr(" salientsdk/examples/*.ipynb | grep -v "/\." || true)
          # Get all notebooks, excluding those that start with a period
          ALL_NOTEBOOKS=$(ls salientsdk/examples/*.ipynb | grep -v "salientsdk/examples/\." || true)
          EXCLUDED_NOTEBOOKS=$(echo -e "$DOWNSCALE_NOTEBOOKS\n$CLOUDFLARE_NOTEBOOKS" | sort -u)
          # Get non-downscale notebooks
          OTHER_NOTEBOOKS=$(comm -23 <(echo "$ALL_NOTEBOOKS" | sort) <(echo "$EXCLUDED_NOTEBOOKS") || true)
          # exclude WIP notebooks beginning with a period
          echo "parallel_matrix={\"notebook\":$(echo "$OTHER_NOTEBOOKS" | jq -R -s -c 'split("\n")[:-1]')}" >> $GITHUB_OUTPUT
          echo "sequential_matrix={\"notebook\":$(echo "$DOWNSCALE_NOTEBOOKS" | jq -R -s -c 'split("\n")[:-1]')}" >> $GITHUB_OUTPUT

  setup-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11.5"
      - uses: snok/install-poetry@v1
        with:
          version: 2.1.2
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Create virtualenv and install
        run: |
          poetry config virtualenvs.in-project true
          poetry env use python3.11
          poetry install --no-interaction --no-ansi
          ls -la .venv/bin  # Debug: verify activate exists
      - name: Save Poetry virtual environment
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: venv-${{ github.run_id }}-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

  test-notebooks-parallel:
    # Run all notebooks that don't use downscale API in parallel for speed
    if: >
      !contains(github.event.pull_request.labels.*.name, 'skip-ci') &&
      (!github.event.pull_request || !contains(github.event.pull_request.title, 'skip-ci'))
    needs: [get-notebooks, setup-dependencies]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.get-notebooks.outputs.parallel_matrix)}}
    env:
      SALIENTSDK_URL: "https://api-beta.salientpredictions.com/"
      USE_MOCK_DOWNSCALE: "True"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.5"

      - name: Restore Poetry virtual environment
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: venv-${{ github.run_id }}-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCP_SECRET_ACCESSOR }}"

      - name: Cache notebook download files
        if: github.ref != 'refs/heads/main' && github.event_name != 'workflow_dispatch'
        uses: actions/cache@v4
        with:
          path: |
            ./salientsdk/examples/*/
          key: ${{ runner.os }}-notebooks-${{ hashFiles('**/salientsdk/*.py') }}

      - name: Run notebook
        run: |
          # ls -la  # Debug: show directory contents
          # ls -la .venv/bin || echo "No .venv/bin directory"  # Debug: check for activate
          source .venv/bin/activate
          jupyter nbconvert --to notebook --execute ${{ matrix.notebook }}

  test-notebooks-sequential:
    # Run notebooks that use downscale API sequentially to avoid rate limits
    if: >
      !contains(github.event.pull_request.labels.*.name, 'skip-ci') &&
      (!github.event.pull_request || !contains(github.event.pull_request.title, 'skip-ci'))
    needs: [get-notebooks, setup-dependencies]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix: ${{fromJson(needs.get-notebooks.outputs.sequential_matrix)}}
    env:
      SALIENTSDK_URL: "https://api-beta.salientpredictions.com/"
      USE_MOCK_DOWNSCALE: "True"
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.5"
      - name: Restore Poetry virtual environment
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            .venv
          key: venv-${{ github.run_id }}-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCP_SECRET_ACCESSOR }}"
      - name: Cache notebook download files
        if: github.ref != 'refs/heads/main' && github.event_name != 'workflow_dispatch'
        uses: actions/cache@v4
        with:
          path: |
            ./salientsdk/examples/*/
          key: ${{ runner.os }}-notebooks-${{ hashFiles('**/salientsdk/*.py') }}
      - name: Run notebook
        run: |
          source .venv/bin/activate
          jupyter nbconvert --to notebook --execute ${{ matrix.notebook }}
