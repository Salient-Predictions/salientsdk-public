name: Release to PyPI

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-publish:
    # prevent an infinite loop of PRs from automerge
    if: >
      !contains(github.event.head_commit.message, 'skip-deploy')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Get full history including branch relationships

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11.5"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.2

      - name: Configure Poetry
        run: poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}

      - name: Build and publish to PyPI
        run: |
          poetry build
          poetry publish

      - name: "Generate GitHub token"
        id: get_app_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.ACTIONS_APP_ID }}
          private_key: ${{ secrets.ACTIONS_APP_PRIVATE_KEY }}

      - name: Sync develop with main
        continue-on-error: true
        run: |
          git config --local user.name ${{ github.actor }}
          git config --local user.email ${{ github.actor }}@users.noreply.github.com
          git fetch origin develop
          echo "Merge failed - creating PR for manual resolution"
          gh pr create \
            --base develop \
            --head main \
            --title "Sync main back to develop [skip-ci] [skip-deploy]" \
            --body "Automated PR to sync changes from main back to develop. Manual resolution needed due to merge conflicts." \
            --label "automerge" \
            --label "merge-conflicts"
        env:
          GITHUB_TOKEN: ${{ steps.get_app_token.outputs.token }}

      - name: Test installed package CLI
        continue-on-error: true
        run: |
          python -m venv test_env
          source test_env/bin/activate
          pip install dist/salientsdk-*.whl
          output=$(salientsdk examples)
          if [ -z "$output" ]; then
            echo "::warning::salientsdk examples returned empty output - package may not be including example files correctly"
          else
            echo "Found examples:"
            echo "$output"
          fi
          deactivate
          rm -rf test_env  # Clean up the test environment
